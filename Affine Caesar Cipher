#include <stdio.h>

int modinv(int a) {
    for (int i = 1; i < 26; i++) if ((a * i) % 26 == 1) return i;
    return -1;
}

char affine_encrypt(char p, int a, int b) {
    return ((a * (p - 'A') + b) % 26) + 'A';
}

char affine_decrypt(char c, int a, int b) {
    int a_inv = modinv(a);
    return ((a_inv * ((c - 'A' - b + 26)) % 26) + 'A');
}

int main() {
    char msg[] = "HELLO", enc[10], dec[10];
    int a = 5, b = 8; // a must be coprime to 26
    for (int i = 0; msg[i]; i++) {
        enc[i] = affine_encrypt(msg[i], a, b);
        dec[i] = affine_decrypt(enc[i], a, b);
    }
    printf("Encrypted: %s\nDecrypted: %s\n", enc, dec);
    return 0;
}
